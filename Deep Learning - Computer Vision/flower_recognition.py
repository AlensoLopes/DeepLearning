# -*- coding: utf-8 -*-
"""Flower Recognition

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1ASneLqkW3U0NaDkAs35-yMyYRa8GyXaP
"""

import matplotlib.pyplot as plt
import numpy as np
import tensorflow as tf
import os
import PIL

from tensorflow import keras
from tensorflow.python.keras import layers
from tensorflow.python.keras.models import Sequential

import pathlib

dataset = "https://storage.googleapis.com/download.tensorflow.org/example_images/flower_photos.tgz"

data = tf.keras.utils.get_file('flower_photos', origin=dataset, untar=True)
data = pathlib.Path(data)

count = len(list(data.glob('*/*.jpg')))
print(count)

roses = list(data.glob('roses/*.jpg'))
PIL.Image.open(roses[0])

batch_size = 32
img_h = 180
img_w = 180

train_ds = tf.keras.utils.image_dataset_from_directory(data, validation_split=0.2, subset='training', seed=1, image_size=(img_h, img_w), batch_size=batch_size)
val_ds = tf.keras.utils.image_dataset_from_directory(data, validation_split=0.2, subset='validation', seed=1, image_size=(img_h, img_w), batch_size=batch_size)

class_names = train_ds.class_names
print(class_names)

plt.figure(figsize=(10,10))
for image, labels in train_ds.take(1):
  for i in range(9):
    ax = plt.subplot(3,3, i + 1)
    plt.imshow(image[i].numpy().astype('uint8'))
    plt.title(train_ds.class_names[labels[i]])
    plt.axis('off')

train_ds = train_ds.cache().shuffle(1000).prefetch(buffer_size=tf.data.AUTOTUNE)
val_ds = val_ds.cache().prefetch(buffer_size=tf.data.AUTOTUNE)

normal_layer = tf.keras.layers.experimental.preprocessing.Rescaling(1./255)

num_classes = len(class_names)

model = Sequential([
                    tf.keras.layers.experimental.preprocessing.Rescaling(1./255, input_shape=(img_h, img_w, 3)),
                    layers.Conv2D(16, 3, padding='same', activation='relu'),

                    layers.MaxPooling2D(),
                    layers.Conv2D(32, 3, padding='same', activation='relu'),

                    layers.MaxPooling2D(),
                    layers.Conv2D(64, 3, padding='same', activation='relu'),

                    layers.MaxPooling2D(),
                    layers.Flatten(),

                    layers.Dense(128, activation='relu'),
                    layers.Dense(num_classes),

])

model.compile(optimizer='adam', loss=tf.keras.losses.SparseCategoricalCrossentropy(from_logits=True), metrics=['accuracy'])

history = model.fit(train_ds, validation_data=val_ds, epochs=10)

acc = history.history['accuracy']
val_acc = history.history['val_accuracy']

loss = history.history['loss']
val_loss = history.history['val_loss']

epochs_range = range(10)

plt.figure(figsize=(8,8))
plt.subplot(1,2,1)
plt.plot(epochs_range, acc, label='Training Accuracy')
plt.plot(epochs_range, val_acc, label='Validation Accuracy')
plt.legend(loc='lower right')
plt.title('Training / Validation Accuracy')

plt.subplot(1,2,2)
plt.plot(epochs_range, loss, label='Training Loss')
plt.plot(epochs_range, val_loss, label='Validation Loss')
plt.legend(loc='upper right')
plt.title('Training / Validation Loss')

plt.show()

data_augmentation = keras.Sequential([
                                      tf.keras.layers.experimental.preprocessing.RandomFlip('horizontal', input_shape=(img_h, img_w, 3)),
                                      tf.keras.layers.experimental.preprocessing.RandomRotation(0.1),
                                      tf.keras.layers.experimental.preprocessing.RandomZoom(0.1),
])

plt.figure(figsize=(10, 10))
for image, _ in train_ds.take(1):
  for i in range(9):
    augmented_image = data_augmentation(image)
    ax = plt.subplot(3, 3, i+1)
    plt.imshow(augmented_image[0].numpy().astype('uint8'))
    plt.axis('off')

model = Sequential([
                    data_augmentation,
                    tf.keras.layers.experimental.preprocessing.Rescaling(1./255),
                    layers.Conv2D(16, 3, padding='same', activation='relu'),
                    layers.MaxPooling2D(),
                    layers.Conv2D(32,3, padding='same', activation='relu'),
                    layers.MaxPooling2D(), 
                    layers.Conv2D(64,3, padding='same', activation='relu'),
                    layers.MaxPooling2D(),
                    tf.keras.layers.Dropout(0.2),
                    layers.Flatten(),
                    layers.Dense(128, activation='relu'),
                    layers.Dense(num_classes)
])

model.compile(optimizer='adam', loss=tf.keras.losses.SparseCategoricalCrossentropy(from_logits=True), metrics=['accuracy'])

history = model.fit(train_ds, validation_data=val_ds, epochs=15)

acc = history.history['accuracy']
val_acc = history.history['val_accuracy']

loss = history.history['loss']
val_loss = history.history['val_loss']

epochs_range = range(15)

plt.figure(figsize=(8, 8))
plt.subplot(1, 2, 1)
plt.plot(epochs_range, acc, label='Training Accuracy')
plt.plot(epochs_range, val_acc, label='Validation Accuracy')
plt.legend(loc='lower right')
plt.title('Training and Validation Accuracy')

plt.subplot(1, 2, 2)
plt.plot(epochs_range, loss, label='Training Loss')
plt.plot(epochs_range, val_loss, label='Validation Loss')
plt.legend(loc='upper right')
plt.title('Training and Validation Loss')
plt.show()

sunflower_url = "https://storage.googleapis.com/download.tensorflow.org/example_images/592px-Red_sunflower.jpg"
sunflow_path = tf.keras.utils.get_file('Red_sunflower', origin=sunflower_url)

img = tf.keras.utils.load_img(sunflow_path, target_size=(img_h, img_w))

img_array = tf.keras.utils.img_to_array(img)
img_array = tf.expand_dims(img_array, 0)

pred = model.predict(img_array)
score = tf.nn.softmax(pred[0])
print('Cette image est probablement une {} avec un poucentage de {} chance'.format(class_names[np.argmax(score)], 100*np.max(score)))
print(img_array.shape)

github_image_folder_url = 'https://raw.githubusercontent.com/NoStrqfe/DeepLearning/master/Transfert%20Learning/Ressources//Roses.jpg'
image_name= 'Water_lilies.jpg'

image_path = tf.keras.utils.get_file('Roses', origin=github_image_folder_url)

img = tf.keras.utils.load_img(image_path, target_size=(img_h, img_w))

img_array = tf.keras.utils.img_to_array(img)
img_array = tf.expand_dims(img_array, 0)

pred = model.predict(img_array)
score = tf.nn.softmax(pred[0])
print('Cette image est probablement une {} avec un poucentage de {} chance'.format(class_names[np.argmax(score)], 100*np.max(score)))
print('Cette image n\'est surment pas une {} avec un pourcentage de {} chance'.format(class_names[np.argmin(score)], 100*np.min(score)))

