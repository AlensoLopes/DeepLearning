# -*- coding: utf-8 -*-
"""CNN

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1dSCXIED8uhcdFte0w3QlqcxT2Ccsx2FZ
"""

import tensorflow as tf
from tensorflow import keras
from tensorflow.python.keras import layers, models
import tensorflow_datasets as tfds
import matplotlib.pyplot as plt

cifar = tf.keras.datasets.cifar10

(train_images, train_labels), (test_images, test_labels) = cifar.load_data()

train_images, test_images = train_images / 255.0, test_images / 255.0

class_names = ['airplane', 'automobile', 'bird', 'cat', 'deer', 'dog', 'frog', 'horse', 'ship', 'truck']

plt.figure(figsize=(10, 10))
for i in range(25):
  plt.subplot(5, 5, i+1)
  plt.yticks([])
  plt.xticks([])
  plt.grid(False)
  plt.imshow(train_images[i])
  plt.xlabel(class_names[train_labels[i][0]])

model = models.Sequential([
              layers.Conv2D(32, (3, 3), activation='relu', input_shape=(32, 32, 3)),
              layers.MaxPooling2D((2, 2)),

              layers.Dropout(0.2),

              layers.Conv2D(64, (3, 3), activation='relu'),
              layers.MaxPooling2D((2, 2)),

              layers.Conv2D(64, (3, 3), activation='relu'),
              
              layers.Flatten(),
              layers.Dense(64, activation='sigmoid'),
              layers.Dense(10)])

model.summary()

model.compile(optimizer='adam', loss=tf.keras.losses.SparseCategoricalCrossentropy(from_logits=True), metrics=['accuracy'])

epochs = 10
model_fit = model.fit(train_images, train_labels, epochs=epochs, validation_data=(test_images, test_labels))

plt.plot(model_fit.history['accuracy'], label='accuracy')
plt.plot(model_fit.history['val_accuracy'], label='val_accuracy')
plt.xlabel('Epoch')
plt.ylabel('Accuracy')
plt.ylim([0.5, 1])
plt.legend(loc='lower right')
plt.show()

plt.plot(model_fit.history['loss'], label='Train loss')
plt.plot(model_fit.history['val_loss'], label='Validation Loss')
plt.xlabel('Epoch')
plt.ylabel('Loss')
plt.ylim([0.5, 1])
plt.legend()
plt.show()
test_loss, test_acc = model.evaluate(test_images, test_labels, verbose=2)

