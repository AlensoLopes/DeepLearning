# -*- coding: utf-8 -*-
"""Reconnaisance Chiffre

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/14iMaw5HrJmH4STAh62P-ZcT2y0ICwd1Y
"""

import tensorflow as tf

from tensorflow import keras
from tensorflow.python.keras import layers

import numpy as np
import matplotlib.pyplot as plt
import pandas as pd 
import seaborn as sns

mnist = tf.keras.datasets.mnist

(X_train, y_train), (X_test, y_test) = mnist.load_data()

index = 870
plt.imshow(X_test[index], cmap='Greys', interpolation='nearest')
plt.show()

y_train = keras.utils.to_categorical(y_train)
y_test = keras.utils.to_categorical(y_test)

X_train = X_train.reshape((X_train.shape[0], 28, 28, 1))
X_test = X_test.reshape((X_test.shape[0], 28, 28, 1))

print(X_test.shape)

X_train = X_train.astype('float32')
X_test = X_test.astype('float32')

X_train = X_train / 255
X_test = X_test / 255

print(X_train.min(), X_train.max(), X_test.min(), X_test.max())

def model():
    model = keras.Sequential([
        
        layers.Conv2D(32, (3, 3), padding='same', input_shape=(28, 28, 1), activation='relu'),
        layers.Conv2D(32, (3, 3), padding='same', activation='relu'),
        
        layers.MaxPooling2D((2, 2)),
        layers.Dropout(0.2),

        layers.Conv2D(64, (3, 3), padding='same', activation='relu'),
        layers.Conv2D(64, (3, 3), padding='same', activation='relu'),
        
        layers.MaxPooling2D((2, 2)),
        layers.Dropout(0.2),

        layers.Flatten(),
        
        layers.Dense(512, activation='relu'),
        layers.Dropout(0.5),

        layers.Dense(10, activation='sigmoid') # 10 -> Nbr entrée de y soit 0, 9
        
    ])
    
    model.compile(loss=keras.losses.categorical_crossentropy, optimizer='adam', metrics=['accuracy'])
    
    return model

with tf.device('/device:GPU:0'):
    model = model()

epochs = 20
model_fit = model.fit(X_train, y_train, batch_size=64, epochs=epochs, validation_data=(X_test, y_test), shuffle=True)

scores = model.evaluate(X_test, y_test)
print('Accuracy : %.2f%%'% (scores[1]*100))

plt.plot(model_fit.history['loss'], label='Train Loss')
plt.plot(model_fit.history['val_loss'], label='Validation Loss')
plt.legend()
plt.show()

plt.plot(model_fit.history['accuracy'], label='Train Accuracy')
plt.plot(model_fit.history['val_accuracy'], label='Val Accuracy')
plt.legend()
plt.show()

width, height, *_ = X_train[0].shape

for i in range(0, 5):
  prob = model.predict(X_test[i].reshape(1, width, height, 1))
  predict = np.argmax(prob, axis=-1)[0]
  print('Image numéro :',i , '/ prédiction :', predict)

prob = model.predict(X_test[870].reshape(1, width, height, 1))
predict = np.argmax(prob, axis=-1)[0]
print('Image numéro :',870 , '/ prédiction :', predict)